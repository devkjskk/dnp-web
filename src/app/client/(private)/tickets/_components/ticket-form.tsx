"use client";

import React, { useMemo } from "react";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { FaLocationCrosshairs } from "react-icons/fa6";
import { toast } from "sonner";
import { useQueryClient } from "@tanstack/react-query";

import MapDialog from "@/components/map/map-dialog";
import UploadField from "@/components/upload";
import { InputField } from "@/components/input-field";
import { SelectField } from "@/components/select-field";
import { SwitchField } from "@/components/switch-field";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { TextAreaField } from "@/components/textarea-field";
import { FormGroup } from "@/components/form-group";
import { Separator } from "@/components/ui/separator";
import { TicketFormType } from "../_types/ticket-form-type";
import { zodResolver } from "@hookform/resolvers/zod";
import { TicketFormSchema } from "../_schemas/ticket-form-schema";
import { convertLatLngStrToArray } from "@/utils/text-formatter";
import { useCreateWhistleblowing } from "../_hooks/useCreateWhistleblowing";
import { GET_WHISTLEBLOWINGS } from "../_hooks/useGetWhistleblowings";
import { createFormData } from "@/utils/form-data";
import dynamic from "next/dynamic";

type TicketFormProps = {};

const TicketForm = (props: TicketFormProps) => {
  const Map = useMemo(
    () =>
      dynamic(() => import("@/components/map/map"), {
        loading: () => (
          <div className="flex items-center justify-center w-full h-full">
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà...
          </div>
        ),
        ssr: false,
      }),
    []
  );

  const queryClient = useQueryClient();
  const { mutate: createWhistleblowing, isPending } = useCreateWhistleblowing();
  const [openMapDialog, setOpenMapDialog] = React.useState(false);
  const form = useForm<TicketFormType>({
    resolver: zodResolver(TicketFormSchema),
    defaultValues: {
      type: "",
      fullName: "",
      isAnonymous: false,
      phoneNumber: "",
      latLng: "",
      location: "",
      addressNumber: "",
      addressMoo: "",
      addressRoad: "",
      addressSubDistrict: "",
      addressDistrict: "",
      addressProvince: "",
      addressZipCode: "",
      date: "",
      time: "",
      subject: "",
      description: "",
      images: [],
      isVolunteer: true,
    },
  });

  const watchLatLng = form.watch("latLng");

  const onSubmit = async (data: any) => {
    const formData = createFormData(data);

    createWhistleblowing(formData, {
      onSuccess: () => {
        toast("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

        form.reset();

        queryClient.invalidateQueries({
          queryKey: [GET_WHISTLEBLOWINGS],
        });
      },
      onError: (error) => {
        toast(error.message);
      },
    });
  };

  const handleSelectMap = (place: any) => {
    console.log("üöÄ ~ handleSelectMap ~ place:", place);
    const latLng = `${place.lat},${place.lon}`;

    form.setValue("latLng", latLng);

    handleCloseMapDialog();
  };

  const handleOpenMapDialog = () => {
    setOpenMapDialog(true);
  };

  const handleCloseMapDialog = () => {
    setOpenMapDialog(false);
  };

  return (
    <Form {...form}>
      <MapDialog
        handleSelectMap={handleSelectMap}
        open={openMapDialog}
        onClose={handleCloseMapDialog}
      />
      <form className="space-y-4" onSubmit={form.handleSubmit(onSubmit)}>
        <FormGroup title="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏">
          <SelectField
            required
            label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏"
            name="type"
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏"
            options={[
              {
                value: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏î‡∏£‡πâ‡∏≠‡∏ô",
                label: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏î‡∏£‡πâ‡∏≠‡∏ô",
              },
              {
                value: "‡πÄ‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î/‡πÄ‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏¢",
                label: "‡πÄ‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î/‡πÄ‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏¢",
              },
              {
                value: "‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤/‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á/‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤",
                label: "‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤/‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á/‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤",
              },
              {
                value: "‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ‡∏õ‡πà‡∏≤",
                label: "‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ‡∏õ‡πà‡∏≤",
              },
              {
                value: "‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏õ‡πà‡∏≤",
                label: "‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏õ‡πà‡∏≤",
              },
              {
                value: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
                label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
              },
            ]}
          />
        </FormGroup>
        <FormGroup title="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏">
          <InputField
            label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏"
            name="fullName"
            placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏"
            required
          />
          <SwitchField label="‡∏õ‡∏Å‡∏õ‡∏¥‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" name="isAnonymous" />
          <InputField
            label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
            name="phoneNumber"
            placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
            required
          />
        </FormGroup>
        <FormGroup title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏">
          <FormField
            control={form.control}
            name="latLng"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS <span className="text-red-500">*</span>
                </FormLabel>
                <FormControl>
                  <div className="flex justify-around items-center gap-4">
                    <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" {...field} />
                    <Button
                      type="button"
                      className="text-[#27A14F] text-xs w-auto space-x-1"
                      variant="outline"
                      onClick={() => handleOpenMapDialog()}
                    >
                      <FaLocationCrosshairs />
                      <span>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
                    </Button>
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {watchLatLng && (
            <div className="h-[250px] w-full">
              <Map
                position={convertLatLngStrToArray(form.getValues("latLng"))}
              />
            </div>
          )}
          <InputField
            label="‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"
            name="location"
            placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
            required
          />
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <InputField
              label="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
              name="addressNumber"
              placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
              required
            />
            <InputField
              label="‡∏´‡∏°‡∏π‡πà"
              name="addressMoo"
              placeholder="‡∏´‡∏°‡∏π‡πà"
              required
            />
            <InputField
              label="‡∏ñ‡∏ô‡∏ô"
              name="addressRoad"
              placeholder="‡∏ñ‡∏ô‡∏ô"
              required
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <InputField
              label="‡∏ï‡∏≥‡∏ö‡∏•"
              name="addressSubDistrict"
              placeholder="‡∏ï‡∏≥‡∏ö‡∏•"
              required
            />
            <InputField
              label="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
              name="addressDistrict"
              placeholder="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
              required
            />
            <InputField
              label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
              name="addressProvince"
              placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
              required
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <InputField
              label="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
              name="addressZipCode"
              placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
              required
            />
            <InputField
              label="‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ"
              name="date"
              placeholder="‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ"
              required
            />
            <InputField label="‡πÄ‡∏ß‡∏•‡∏≤" name="time" placeholder="‡πÄ‡∏ß‡∏•‡∏≤" required />
          </div>
        </FormGroup>
        <FormGroup title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏">
          <InputField
            label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
            name="subject"
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
            required
          />
          <TextAreaField
            label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
            name="description"
            placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
            inputProps={{
              rows: 4,
            }}
          />
          <UploadField
            label="‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
            name="images"
            placeholder="‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
          />
          <SwitchField
            label="‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏û‡∏∑‡∏ä ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
            name="isVolunteer"
          />
        </FormGroup>
        <Separator />
        <div className="flex justify-between">
          <Button
            type="button"
            variant="outline"
            className="border-red-500 text-red-500 hover:text-red-500"
          >
            ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
          </Button>
          <Button type="submit">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏</Button>
        </div>
      </form>
    </Form>
  );
};

export default TicketForm;
